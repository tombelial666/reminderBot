import unittest

from telegram import InlineKeyboardMarkup, ReplyKeyboardMarkup

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º remind_bot, —á—Ç–æ–±—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏—Å—å I18N bundles —á–µ—Ä–µ–∑ set_bundles()
import remind_bot as rb  # noqa: F401
from keyboards import main_menu, inline_main_menu


class KeyboardLabelsTests(unittest.TestCase):
    def test_reply_keyboard_ru_emojis_and_hints(self):
        kb: ReplyKeyboardMarkup = main_menu("ru")
        rows = kb.keyboard
        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: /start, /list, /watch, /help
        self.assertTrue(rows[0][0].text.startswith("/start "))
        self.assertIn("/list ", rows[0][1].text)
        self.assertIn("/watch ", rows[0][2].text)
        self.assertIn("/help ", rows[0][3].text)
        # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: /at (—á—á:–º–º) ‚è∞ –∏ /in (–º–∏–Ω) ‚åõ
        self.assertIn("/at (—á—á:–º–º)", rows[1][0].text)
        self.assertTrue(rows[1][0].text.endswith("‚è∞"))
        self.assertIn("/in (–º–∏–Ω)", rows[1][1].text)
        self.assertTrue(rows[1][1].text.endswith("‚åõ"))
        # –¢—Ä–µ—Ç—å—è /menu, —á–µ—Ç–≤–µ—Ä—Ç–∞—è /tz, /lang
        self.assertTrue(rows[2][0].text.startswith("/menu "))
        self.assertTrue(rows[3][0].text.startswith("/tz "))
        self.assertTrue(rows[3][1].text.startswith("/lang "))

    def test_reply_keyboard_en_hints(self):
        kb: ReplyKeyboardMarkup = main_menu("en")
        rows = kb.keyboard
        self.assertIn("/at (hh:mm)", rows[1][0].text)
        self.assertIn("/in (min)", rows[1][1].text)

    def test_reply_keyboard_th_hints(self):
        kb: ReplyKeyboardMarkup = main_menu("th")
        rows = kb.keyboard
        # –£–∫–∞–∑–∞–Ω–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏–∑ hint_at/hint_in
        self.assertIn("/at (‡∏ä‡∏°:‡∏ô‡∏≤‡∏ó‡∏µ)", rows[1][0].text)
        self.assertIn("/in (‡∏ô‡∏≤‡∏ó‡∏µ)", rows[1][1].text)

    def test_inline_main_menu_emojis(self):
        mk: InlineKeyboardMarkup = inline_main_menu("ru")
        rows = mk.inline_keyboard
        # 1-—è —Å—Ç—Ä–æ–∫–∞: üóíÔ∏è, ‚è±Ô∏è
        self.assertTrue(rows[0][0].text.startswith("üóíÔ∏è "))
        self.assertTrue(rows[0][1].text.startswith("‚è±Ô∏è "))
        # 2-—è —Å—Ç—Ä–æ–∫–∞: ‚ùå
        self.assertTrue(rows[1][0].text.startswith("‚ùå "))
        # 3-—è —Å—Ç—Ä–æ–∫–∞: üåê
        self.assertTrue(rows[2][0].text.startswith("üåê "))
        # 4-—è —Å—Ç—Ä–æ–∫–∞: üîî
        self.assertTrue(rows[3][0].text.startswith("üîî "))
        # 5-—è —Å—Ç—Ä–æ–∫–∞: ‚è∞ /at ..., ‚åõ /in ...
        self.assertTrue(rows[4][0].text.startswith("‚è∞ /at "))
        self.assertTrue(rows[4][1].text.startswith("‚åõ /in "))


class CommandEmojiHintTests(unittest.IsolatedAsyncioTestCase):
    class FakeBot:
        def __init__(self) -> None:
            self.sent = []

        async def send_message(self, chat_id: int, text: str, reply_markup=None, disable_notification=False):
            self.sent.append((chat_id, text, reply_markup, disable_notification))

    class FakeApplication:
        def __init__(self) -> None:
            self.bot = CommandEmojiHintTests.FakeBot()
            from unittest.mock import MagicMock
            self.job_queue = MagicMock()

    class FakeMessage:
        def __init__(self, text: str, message_id: int = 1):
            self.text = text
            self.message_id = message_id
            self.replies = []
            self.reply_markups = []

        async def reply_text(self, text: str, reply_markup=None, disable_notification=False):
            self.replies.append(text)
            self.reply_markups.append(reply_markup)

    class FakeActor:
        def __init__(self, _id: int, username: str = "testuser"):
            self.id = _id
            self.username = username

    class FakeUpdate:
        def __init__(self, chat_id: int, user_id: int, text: str, message_id: int = 1):
            self.effective_chat = CommandEmojiHintTests.FakeActor(chat_id)
            self.effective_user = CommandEmojiHintTests.FakeActor(user_id)
            self.effective_message = CommandEmojiHintTests.FakeMessage(text, message_id)

    class FakeContext:
        def __init__(self, args=None, user_data=None):
            from unittest.mock import MagicMock
            self.args = args or []
            self.user_data = user_data or {}
            self.job = MagicMock()

    async def asyncSetUp(self):
        import tempfile
        self.db = rb.ReminderDB(tempfile.NamedTemporaryFile(delete=False).name)
        self.app = self.FakeApplication()
        self.sched = rb.ReminderScheduler(self.app, self.db)
        self.sched.start()
        self.handlers = rb.BotHandlers(self.app, self.db, self.sched, "Europe/Moscow")
        self.chat_id = 111
        self.user_id = 222

    async def asyncTearDown(self):
        try:
            self.sched.shutdown()
        except Exception:
            pass

    async def test_tz_with_emoji_arg_prompts_city(self):
        upd = self.FakeUpdate(self.chat_id, self.user_id, "/tz üåç")
        ctx = self.FakeContext(args=["üåç"])
        await self.handlers.cmd_tz(upd, ctx)
        out = "\n".join(upd.effective_message.replies)
        # –¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å–∏–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
        self.assertTrue(("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è" in out) or ("Enter your local time" in out))

    async def test_back_navigation_multi_level(self):
        # –ü—Ä–æ–≤–µ—Ä–∏–º —Å—Ç–µ–∫–æ–≤—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø—É–±–ª–∏—á–Ω–æ–π —É—Ç–∏–ª–∏—Ç–æ–π apply_back_navigation
        import remind_bot as rb
        stack = ["main", "at_date", "at_hour", "at_minute"]
        user_data = {"pending_at_hhmm": "10:10"}
        s1 = rb.apply_back_navigation(stack, user_data)
        self.assertEqual(s1, "at_hour")
        self.assertNotIn("pending_at_hhmm", user_data)
        s2 = rb.apply_back_navigation(stack, user_data)
        self.assertEqual(s2, "at_date")
        s3 = rb.apply_back_navigation(stack, user_data)
        self.assertEqual(s3, "main")


    async def test_lang_with_emoji_arg_shows_menu(self):
        upd = self.FakeUpdate(self.chat_id, self.user_id, "/lang üåê")
        ctx = self.FakeContext(args=["üåê"])
        await self.handlers.cmd_lang(upd, ctx)
        out = "\n".join(upd.effective_message.replies)
        # –î–æ–ª–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞, –∞ –Ω–µ –æ—à–∏–±–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
        self.assertIn("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫", out)

    async def test_in_hint_with_emoji_opens_minutes_picker(self):
        # RU –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        upd = self.FakeUpdate(self.chat_id, self.user_id, "/in (–º–∏–Ω) ‚åõ")
        ctx = self.FakeContext()
        await self.handlers.cmd_in(upd, ctx)
        out = "\n".join(upd.effective_message.replies)
        self.assertIn("–ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç", out)
        self.assertIsInstance(upd.effective_message.reply_markups[-1], InlineKeyboardMarkup)

    async def test_at_hint_with_emoji_opens_date_picker(self):
        upd = self.FakeUpdate(self.chat_id, self.user_id, "/at (—á—á:–º–º) ‚è∞")
        ctx = self.FakeContext()
        await self.handlers.cmd_at(upd, ctx)
        out = "\n".join(upd.effective_message.replies)
        self.assertIn("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", out)
        self.assertIsInstance(upd.effective_message.reply_markups[-1], InlineKeyboardMarkup)


if __name__ == "__main__":
    unittest.main()


