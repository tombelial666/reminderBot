import asyncio
import logging
import os
import signal
import sqlite3
from dataclasses import dataclass
from datetime import datetime, timedelta, timezone
from typing import List, Optional, Tuple, Dict

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.date import DateTrigger
from dateparser import parse as dp_parse
from dateparser.search import search_dates
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.constants import ParseMode
from telegram.ext import (Application, ApplicationBuilder, CommandHandler,
                          ContextTypes, CallbackQueryHandler, MessageHandler, filters)
from telegram import BotCommand

try:
    from zoneinfo import ZoneInfo
except Exception:  # pragma: no cover
    ZoneInfo = None  # Python <3.9 fallback (not expected)


# =============================
# –ö–æ–Ω—Ñ–∏–≥ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# =============================

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")
TOKEN_FILE = os.getenv("TELEGRAM_BOT_TOKEN_FILE", ".telegram_token")
if not BOT_TOKEN:
    try:
        if os.path.exists(TOKEN_FILE):
            with open(TOKEN_FILE, "r", encoding="utf-8") as _tf:
                BOT_TOKEN = _tf.read().strip()
    except Exception:
        pass
DEFAULT_TZ = os.getenv("REMIND_BOT_TZ", "Asia/Bangkok")
DEFAULT_LANG = os.getenv("REMIND_BOT_LANG", "ru").lower()
DB_PATH = os.getenv("REMIND_DB_PATH", "reminders.db")

LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO").upper()
logging.basicConfig(
    level=getattr(logging, LOG_LEVEL, logging.INFO),
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
logger = logging.getLogger("reminder-bot")

# externalized i18n and keyboards
from i18n import t, set_bundles
from keyboards import (
    main_menu,
    inline_main_menu,
    inline_lang_menu,
    inline_tz_menu,
    inline_rid_menu,
    inline_hours_menu,
    inline_minutes_menu_for_at,
    inline_minutes_menu_for_in,
    inline_insert_menu,
    inline_dates_menu,
    inline_snooze_menu,
)


# =============================
# I18N (RU/TH)
# =============================

_BUNDLES: Dict[str, Dict[str, str]] = {
    "ru": {
        "help": (
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç‚Äë–Ω–∞–ø–æ–º–∏–Ω–∞–ª—å—â–∏–∫. –ù–∏–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n\n"
            "1) –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É):\n"
            "   ‚Ä¢ /list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.\n"
            "   ‚Ä¢ /watch ‚Äî –≤–∫–ª—é—á–∏—Ç—å —Ç–∏–∫–∞—é—â–∏–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ ID.\n"
            "   ‚Ä¢ /help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É –ø–æ–¥—Å–∫–∞–∑–∫—É.\n"
            "   ‚Ä¢ /menu ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –∏–Ω–ª–∞–π–Ω‚Äë–º–µ–Ω—é (—É–¥–æ–±–Ω—ã–π –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏/–¥–∞—Ç—ã).\n"
            "   ‚Ä¢ /lang ‚Äî –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.\n\n"
            "2) –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ß–ï–†–ï–ó (–º–∏–Ω—É—Ç—ã/—á–∞—Å—ã):\n"
            "   –í–∞—Ä–∏–∞–Ω—Ç –ê ‚Äî –≤—Ä—É—á–Ω—É—é: /in 20m –≤—ã–ø–∏—Ç—å –≤–æ–¥—É\n"
            "   –í–∞—Ä–∏–∞–Ω—Ç –ë ‚Äî –±–µ–∑ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏: /menu ‚Üí ‚Äò/in (min)‚Äô ‚Üí –≤—ã–±—Ä–∞—Ç—å –º–∏–Ω—É—Ç—ã (—à–∞–≥ 5) ‚Üí –±–æ—Ç –ø–æ–ø—Ä–æ—Å–∏—Ç —Ç–µ–∫—Å—Ç ‚Üí –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç.\n\n"
            "3) –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ù–ê –í–†–ï–ú–Ø:\n"
            "   –í–∞—Ä–∏–∞–Ω—Ç –ê ‚Äî –≤—Ä—É—á–Ω—É—é: /at –∑–∞–≤—Ç—Ä–∞ 9:30 –ø–æ–∑–≤–æ–Ω–∏—Ç—å\n"
            "   –í–∞—Ä–∏–∞–Ω—Ç –ë ‚Äî –±–µ–∑ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏: /menu ‚Üí ‚Äò/at (hh:mm)‚Äô ‚Üí –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É ‚Üí —á–∞—Å ‚Üí –º–∏–Ω—É—Ç—ã ‚Üí –±–æ—Ç –ø–æ–ø—Ä–æ—Å–∏—Ç —Ç–µ–∫—Å—Ç ‚Üí –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç.\n\n"
            "4) Snooze (–æ—Ç–ª–æ–∂–∏—Ç—å): –∫–æ–≥–¥–∞ –ø—Ä–∏–¥—ë—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –ø–æ–¥ –Ω–∏–º –ø–æ—è–≤—è—Ç—Å—è –∫–Ω–æ–ø–∫–∏: +15m / +30m / +60m.\n\n"
            "5) –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:\n"
            "   ‚Ä¢ /cancel <id> ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.\n"
            "   ‚Ä¢ /watch <id> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–∏–∫–∞—é—â–∏–π —Ç–∞–π–º–µ—Ä –¥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.\n"
            "   ‚Ä¢ /tz [Region/City] ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å/—Å–º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, Europe/Moscow).\n"
            "   ‚Ä¢ /lang ‚Äî –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ (ru/th/en).\n\n"
            "–ü–æ–¥—Å–∫–∞–∑–∫–∏: –¥–∞—Ç—ã/–≤—Ä–µ–º—è –ø–æ–Ω–∏–º–∞—é—Ç—Å—è –Ω–∞ ru/en/th. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é TZ: {tz}. –Ø–∑—ã–∫ —Å–µ–π—á–∞—Å: {lang} (–¥–µ—Ñ–æ–ª—Ç: {def_lang})."
        ),
        "need_duration": "–£–∫–∞–∂–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Ç–µ–∫—Å—Ç. –ù–∞–ø—Ä–∏–º–µ—Ä: /in 20m –≤—ã–ø–∏—Ç—å –≤–æ–¥—É",
        "empty_text": "–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –î–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.",
        "time_passed": "–í—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ. –£–∫–∞–∂–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.",
        "in_ok": "–û–∫, –Ω–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ {delta} –≤ {when_local} ({tz}).\nID: {rid}",
        "at_need": "–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É/–≤—Ä–µ–º—è –∏ —Ç–µ–∫—Å—Ç. –ù–∞–ø—Ä–∏–º–µ—Ä: /at –∑–∞–≤—Ç—Ä–∞ 9:00 –∫—É–ø–∏—Ç—å —Ö–ª–µ–±",
        "at_unparsed": "–ù–µ —Å–º–æ–≥ –ø–æ–Ω—è—Ç—å –¥–∞—Ç—É/–≤—Ä–µ–º—è. –ü—Ä–∏–º–µ—Ä—ã: '–∑–∞–≤—Ç—Ä–∞ 9:30', '2025-12-31 23:00'",
        "at_empty": "–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –î–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏.",
        "at_past": "–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ. –£–∫–∞–∂–∏—Ç–µ –±—É–¥—É—â–∏–π –º–æ–º–µ–Ω—Ç.",
        "at_ok": "–û–∫, –Ω–∞–ø–æ–º–Ω—é {when_local} ({tz}) ‚Äî —á–µ—Ä–µ–∑ {delta}.\nID: {rid}",
        "list_empty": "–ê–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ—Ç.",
        "list_header": "–ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (TZ {tz}):",
        "cancel_need": "–£–∫–∞–∂–∏—Ç–µ ID: /cancel <id>",
        "cancel_nan": "ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º: /cancel 123",
        "cancel_ok": "–û—Ç–º–µ–Ω–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ID {rid}.",
        "cancel_not_found": "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å —Ç–∞–∫–∏–º ID (–∏–ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ/–æ—Ç–º–µ–Ω–µ–Ω–æ).",
        "snooze_need": "–£–∫–∞–∂–∏—Ç–µ: /snooze <id> <–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å>",
        "snooze_ok": "–û—Ç–ª–æ–∂–µ–Ω–æ –¥–æ {when_local} ({tz}) ‚Äî —á–µ—Ä–µ–∑ {delta}. ID: {rid}",
        "tz_show": "–¢–µ–∫—É—â–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {tz}\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: /tz Region/City (–Ω–∞–ø—Ä., Europe/Moscow)",
        "tz_bad": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å. –ü—Ä–∏–º–µ—Ä: Europe/Moscow",
        "tz_ok": "–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {tz}",
        "lang_show": "–¢–µ–∫—É—â–∏–π —è–∑—ã–∫: {lang}\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: /lang ru | th | en",
        "lang_bad": "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ: ru, th, en",
        "lang_ok": "–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {lang}",
        "error": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        "late_prefix": "(–ü–æ–∑–¥–Ω–æ) "
        ,"btn_insert_in": "–í—Å—Ç–∞–≤–∏—Ç—å /in"
        ,"btn_insert_at": "–í—Å—Ç–∞–≤–∏—Ç—å /at"
        ,"btn_insert_snooze": "–í—Å—Ç–∞–≤–∏—Ç—å /snooze"
        ,"btn_list": "–°–ø–∏—Å–æ–∫"
        ,"btn_watch": "–ù–∞–±–ª—é–¥–∞—Ç—å"
        ,"btn_cancel": "–û—Ç–º–µ–Ω–∏—Ç—å"
        ,"btn_tz": "–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å"
        ,"btn_lang": "–Ø–∑—ã–∫"
        ,"btn_back": "–ù–∞–∑–∞–¥"
        ,"btn_tools": "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"
        ,"btn_sound": "–ó–≤—É–∫"
        ,"choose_action": "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        ,"choose_watch": "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è:"
        ,"choose_cancel": "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –æ—Ç–º–µ–Ω—ã:"
        ,"choose_lang": "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:"
        ,"choose_tz": "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:"
        ,"choose_sound": "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∑–≤—É–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:"
        ,"sound_on": "üîî –°–æ –∑–≤—É–∫–æ–º"
        ,"sound_off": "üîï –ë–µ–∑ –∑–≤—É–∫–∞"
        ,"choose_at_hour": "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å (0‚Äì23):"
        ,"choose_at_min": "–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω—É—Ç—ã (—à–∞–≥ 5):"
        ,"choose_in_min": "–ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç (—à–∞–≥ 5):"
        ,"choose_at_date": "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:"
        ,"btn_insert_cmd": "–í—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É"
        ,"enter_text": "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º"
        ,"btn_done": "–û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º"
        ,"snooze_15": "+15–º"
        ,"snooze_30": "+30–º"
        ,"snooze_60": "+60–º"
    },
    "th": {
        "help": (
            "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ! ‡∏â‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠‡∏ö‡∏≠‡∏ó‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥\n\n"
            "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á:\n"
            "/in <‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤> <‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°> ‚Äî ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤.\n"
            "‡πÄ‡∏ä‡πà‡∏ô: /in 10m ‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥; /in 2 ‡∏ä‡∏° 15 ‡∏ô‡∏≤‡∏ó‡∏µ ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô\n\n"
            "/at <‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤> <‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°> ‚Äî ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î.\n"
            "‡πÄ‡∏ä‡πà‡∏ô: /at ‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ 9:30 ‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏ô‡∏°‡∏õ‡∏±‡∏á; /at 2025-12-31 23:00 ‡∏≠‡∏ß‡∏¢‡∏û‡∏£\n\n"
            "/list ‚Äî ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà\n"
            "/cancel <id> ‚Äî ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ï‡∏≤‡∏° ID\n"
            "/snooze <id> <‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤> ‚Äî ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô\n"
            "/tz [Region/City] ‚Äî ‡πÅ‡∏™‡∏î‡∏á/‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏ã‡∏ô‡πÄ‡∏ß‡∏•‡∏≤\n"
            "/lang [ru|th|en] ‚Äî ‡πÅ‡∏™‡∏î‡∏á/‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏†‡∏≤‡∏©‡∏≤\n\n"
            "‡πÇ‡∏ã‡∏ô‡πÄ‡∏ß‡∏•‡∏≤: {tz}\n‡∏†‡∏≤‡∏©‡∏≤: {lang} (‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: {def_lang})"
        ),
        "need_duration": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡πÄ‡∏ä‡πà‡∏ô /in 20m ‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥",
        "empty_text": "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏á‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤",
        "time_passed": "‡πÄ‡∏ß‡∏•‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0",
        "in_ok": "‡∏ï‡∏Å‡∏•‡∏á ‡∏à‡∏∞‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô {delta} ‡πÄ‡∏ß‡∏•‡∏≤ {when_local} ({tz})\nID: {rid}",
        "at_need": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡πÄ‡∏ä‡πà‡∏ô /at ‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ 9:00 ‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏ô‡∏°‡∏õ‡∏±‡∏á",
        "at_unparsed": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏î‡πâ ‡πÄ‡∏ä‡πà‡∏ô '‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ 9:30', '2025-12-31 23:00'",
        "at_empty": "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏á‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤",
        "at_past": "‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï",
        "at_ok": "‡∏ï‡∏Å‡∏•‡∏á ‡∏à‡∏∞‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô {when_local} ({tz}) ‚Äî ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô {delta}\nID: {rid}",
        "list_empty": "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
        "list_header": "‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà (TZ {tz}):",
        "cancel_need": "‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏ ID: /cancel <id>",
        "cancel_nan": "ID ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç: /cancel 123",
        "cancel_ok": "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ID {rid} ‡πÅ‡∏•‡πâ‡∏ß",
        "cancel_not_found": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏î‡πâ‡∏ß‡∏¢ ID ‡∏ô‡∏µ‡πâ",
        "snooze_need": "‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏: /snooze <id> <‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤>",
        "snooze_ok": "‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏ñ‡∏∂‡∏á {when_local} ({tz}) ‚Äî ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô {delta} ID: {rid}",
        "tz_show": "‡πÇ‡∏ã‡∏ô‡πÄ‡∏ß‡∏•‡∏≤: {tz}\n‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤: /tz Region/City (‡πÄ‡∏ä‡πà‡∏ô Europe/Moscow)",
        "tz_bad": "‡πÇ‡∏ã‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: Europe/Moscow",
        "tz_ok": "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏ã‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô {tz}",
        "lang_show": "‡∏†‡∏≤‡∏©‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {lang}\n‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤: /lang ru ‡∏´‡∏£‡∏∑‡∏≠ /lang th",
        "lang_bad": "‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞: ru, th",
        "lang_ok": "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏†‡∏≤‡∏©‡∏≤‡πÄ‡∏õ‡πá‡∏ô {lang}",
        "error": "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á",
        "late_prefix": "(‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤) "
        ,"btn_insert_in": "‡πÅ‡∏ó‡∏£‡∏Å /in"
        ,"btn_insert_at": "‡πÅ‡∏ó‡∏£‡∏Å /at"
        ,"btn_insert_snooze": "‡πÅ‡∏ó‡∏£‡∏Å /snooze"
        ,"btn_list": "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"
        ,"btn_watch": "‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°"
        ,"btn_cancel": "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"
        ,"btn_tz": "‡πÇ‡∏ã‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"
        ,"btn_lang": "‡∏†‡∏≤‡∏©‡∏≤"
        ,"btn_back": "‡∏Å‡∏•‡∏±‡∏ö"
        ,"btn_tools": "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠"
        ,"btn_sound": "‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô"
        ,"choose_action": "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:"
        ,"choose_watch": "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ù‡πâ‡∏≤‡∏î‡∏π:"
        ,"choose_cancel": "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å:"
        ,"choose_lang": "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏©‡∏≤:"
        ,"choose_tz": "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ã‡∏ô‡πÄ‡∏ß‡∏•‡∏≤:"
        ,"choose_sound": "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:"
        ,"sound_on": "üîî ‡∏°‡∏µ‡πÄ‡∏™‡∏µ‡∏¢‡∏á"
        ,"sound_off": "üîï ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏™‡∏µ‡∏¢‡∏á"
        ,"choose_at_hour": "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á (0‚Äì23):"
        ,"choose_at_min": "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ô‡∏≤‡∏ó‡∏µ (‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ):"
        ,"choose_in_min": "‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏µ‡πà‡∏ô‡∏≤‡∏ó‡∏µ (‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ):"
        ,"choose_at_date": "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:"
        ,"btn_insert_cmd": "‡πÅ‡∏ó‡∏£‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á"
        ,"enter_text": "‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡∏°‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢"
        ,"btn_done": "‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß"
        ,"snooze_15": "+15‡∏ô"
        ,"snooze_30": "+30‡∏ô"
        ,"snooze_60": "+60‡∏ô"
    },
    "en": {
        "help": (
            "Hi! I'm a reminder bot.\n\n"
            "Commands:\n"
            "/in <duration> <text> ‚Äî remind after a period.\n"
            "Ex.: /in 10m drink water; /in 2h 15m send report.\n\n"
            "/at <datetime> <text> ‚Äî remind at a specific time.\n"
            "Ex.: /at tomorrow 9:30 buy bread; /at 2025-12-31 23:00 celebrate.\n\n"
            "/list ‚Äî show active reminders.\n"
            "/cancel <id> ‚Äî cancel by ID.\n"
            "/snooze <id> <duration> ‚Äî postpone an active reminder.\n"
            "/tz [Region/City] ‚Äî show/set timezone.\n"
            "/lang [ru|th|en] ‚Äî show/set language.\n\n"
            "Timezone: {tz}\nLanguage: {lang} (default: {def_lang})"
        ),
        "need_duration": "Provide duration and text. E.g. /in 20m drink water",
        "empty_text": "Empty reminder text. Add text after duration.",
        "time_passed": "Time already passed. Use duration > 0.",
        "in_ok": "Ok, will remind in {delta} at {when_local} ({tz}).\nID: {rid}",
        "at_need": "Provide datetime and text. E.g. /at tomorrow 9:00 buy bread",
        "at_unparsed": "Couldn't parse date/time. Examples: 'tomorrow 9:30', '2025-12-31 23:00'",
        "at_empty": "Empty reminder text. Add text after datetime.",
        "at_past": "That time is in the past. Use a future moment.",
        "at_ok": "Ok, will remind {when_local} ({tz}) ‚Äî in {delta}.\nID: {rid}",
        "list_empty": "No active reminders.",
        "list_header": "Active reminders (TZ {tz}):",
        "cancel_need": "Provide ID: /cancel <id>",
        "cancel_nan": "ID must be a number: /cancel 123",
        "cancel_ok": "Canceled reminder ID {rid}.",
        "cancel_not_found": "No active reminder with that ID (or already done/canceled).",
        "snooze_need": "Usage: /snooze <id> <duration>",
        "snooze_ok": "Snoozed to {when_local} ({tz}) ‚Äî in {delta}. ID: {rid}",
        "tz_show": "Current timezone: {tz}\nSet: /tz Region/City (e.g., Europe/Moscow)",
        "tz_bad": "Invalid timezone. Example: Europe/Moscow",
        "tz_ok": "Timezone set to: {tz}",
        "lang_show": "Current language: {lang}\nSet: /lang ru | th | en",
        "lang_bad": "Supported: ru, th, en",
        "lang_ok": "Language set: {lang}",
        "error": "Internal error. Please try again later.",
        "late_prefix": "(Late) "
        ,"btn_insert_in": "Insert /in"
        ,"btn_insert_at": "Insert /at"
        ,"btn_insert_snooze": "Insert /snooze"
        ,"btn_list": "List"
        ,"btn_watch": "Watch"
        ,"btn_cancel": "Cancel"
        ,"btn_tz": "Timezone"
        ,"btn_lang": "Language"
        ,"btn_back": "Back"
        ,"btn_tools": "Tools"
        ,"btn_sound": "Sound"
        ,"choose_action": "Choose an action:"
        ,"choose_watch": "Choose a reminder to watch:"
        ,"choose_cancel": "Choose a reminder to cancel:"
        ,"choose_lang": "Choose language:"
        ,"choose_tz": "Choose timezone:"
        ,"choose_sound": "Choose notification sound:"
        ,"sound_on": "üîî Sound on"
        ,"sound_off": "üîï Silent"
        ,"choose_at_hour": "Choose hour (0‚Äì23):"
        ,"choose_at_min": "Choose minutes (step 5):"
        ,"choose_in_min": "In how many minutes (step 5):"
        ,"choose_at_date": "Choose a date:"
        ,"btn_insert_cmd": "Insert command"
        ,"enter_text": "Type the reminder text and send it"
        ,"btn_done": "Mark as read"
        ,"snooze_15": "+15m"
        ,"snooze_30": "+30m"
        ,"snooze_60": "+60m"
    },
}

set_bundles(_BUNDLES, DEFAULT_LANG)


# =============================
# –£—Ç–∏–ª–∏—Ç—ã –≤—Ä–µ–º–µ–Ω–∏
# =============================

@dataclass
class ParsedAt:
    when_utc: datetime
    source_text: str


def get_tz(tz_name: str) -> timezone:
    if ZoneInfo is None:
        return timezone.utc
    try:
        return ZoneInfo(tz_name)
    except Exception:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å TZ %s, –∏—Å–ø–æ–ª—å–∑—É—é UTC", tz_name)
        return timezone.utc


def is_valid_tz(tz_name: str) -> bool:
    try:
        _ = get_tz(tz_name)
        if ZoneInfo is None:
            return tz_name.lower() in ("utc", "gmt")
        try:
            ZoneInfo(tz_name)
            return True
        except Exception:
            return False
    except Exception:
        return False


def now_utc() -> datetime:
    return datetime.now(timezone.utc)


def clamp_future(dt: datetime) -> Optional[datetime]:
    if dt is None:
        return None
    if dt.tzinfo is None:
        dt = dt.replace(tzinfo=timezone.utc)
    if dt < now_utc():
        return None
    return dt


def _split_delta(delta: timedelta) -> Tuple[int, int, int, int]:
    total_seconds = int(delta.total_seconds())
    if total_seconds < 0:
        total_seconds = -total_seconds
    days, rem = divmod(total_seconds, 86400)
    hours, rem = divmod(rem, 3600)
    minutes, seconds = divmod(rem, 60)
    return days, hours, minutes, seconds


def format_timedelta_brief_localized(user_lang: str, delta: timedelta) -> str:
    lang = (user_lang or DEFAULT_LANG).lower()
    days, hours, minutes, seconds = _split_delta(delta)
    parts: List[str] = []
    if lang == "en":
        if days:
            parts.append(f"{days}d")
        if hours:
            parts.append(f"{hours}h")
        if minutes:
            parts.append(f"{minutes}m")
        if not parts and seconds:
            parts.append(f"{seconds}s")
    elif lang == "th":
        if days:
            parts.append(f"{days} ‡∏ß‡∏±‡∏ô")
        if hours:
            parts.append(f"{hours} ‡∏ä‡∏°")
        if minutes:
            parts.append(f"{minutes} ‡∏ô")
        if not parts and seconds:
            parts.append(f"{seconds} ‡∏ß‡∏¥")
    else:  # ru default
        if days:
            parts.append(f"{days}–¥")
        if hours:
            parts.append(f"{hours}—á")
        if minutes:
            parts.append(f"{minutes}–º")
        if not parts and seconds:
            parts.append(f"{seconds}—Å")
    return " ".join(parts) or ("0s" if lang == "en" else ("0 ‡∏ß‡∏¥" if lang == "th" else "0—Å"))


def parse_duration_prefix(text: str) -> Tuple[Optional[timedelta], str]:
    """–ü–∞—Ä—Å–∏—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ (RU/EN/TH)."""
    import re

    s = text.strip()
    if not s:
        return None, ""

    # –£–¥–∞–ª—è–µ–º –≤–µ–¥—É—â–∏–µ –º–∞—Ä–∫–µ—Ä—ã: in|—á–µ—Ä–µ–∑|‡∏≠‡∏µ‡∏Å|‡πÉ‡∏ô
    s = re.sub(r"(?iu)^(in|—á–µ—Ä–µ–∑|‡∏≠‡∏µ‡∏Å|‡πÉ‡∏ô)\s+", "", s)

    # –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–∏—Ç–µ–ª–∏
    connectors = {"–∏", "and", ",", "‡πÅ‡∏•‡∏∞"}

    tokens = s.split()

    def is_duration_token(tok: str) -> Optional[Tuple[int, str]]:
        m = re.fullmatch(r"(?iu)(\d+)\s*([a-zA-Z–∞-—è–ê-–Ø—ë–Å‡∏Å-‡πô\.]+)", tok)
        if not m:
            return None
        return int(m.group(1)), m.group(2).lower().strip('.')

    # –ü–æ–ø—Ä–æ–±—É–µ–º —Ç–æ–∫–µ–Ω–∞–º–∏
    prefix = []
    idx = 0
    while idx < len(tokens):
        tok = tokens[idx]
        if tok.lower() in connectors:
            idx += 1
            continue
        parsed = is_duration_token(tok)
        if parsed is None:
            break
        prefix.append(parsed)
        idx += 1

    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî —Å–ª–∏—Ç–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏
    if not prefix:
        miter = re.finditer(r"(?iu)^(?:\s*(?:in|—á–µ—Ä–µ–∑|‡∏≠‡∏µ‡∏Å|‡πÉ‡∏ô)\s*)?(\s*\d+\s*[a-zA-Z–∞-—è–ê-–Ø—ë–Å‡∏Å-‡πô\.]+)+", s)
        try:
            m0 = next(miter)
        except StopIteration:
            return None, text.strip()
        dur_str = m0.group(0)
        rest = s[len(dur_str):].lstrip()
        parts = re.findall(r"(?iu)(\d+)\s*([a-zA-Z–∞-—è–ê-–Ø—ë–Å‡∏Å-‡πô\.]+)", dur_str)
        if not parts:
            return None, text.strip()
        prefix = [(int(v), u.lower().strip('.')) for v, u in parts]
        remainder = rest
    else:
        remainder = " ".join(tokens[idx:]).strip()

    unit_map = {
        # EN/RU seconds
        "s": "seconds", "sec": "seconds", "secs": "seconds", "second": "seconds", "seconds": "seconds",
        "—Å": "seconds", "—Å–µ–∫": "seconds", "—Å–µ–∫—É–Ω–¥–∞": "seconds", "—Å–µ–∫—É–Ω–¥—ã": "seconds", "—Å–µ–∫—É–Ω–¥": "seconds",
        # TH seconds
        "‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ": "seconds", "‡∏ß‡∏¥": "seconds", "‡∏ß": "seconds",
        # minutes
        "m": "minutes", "min": "minutes", "mins": "minutes", "minute": "minutes", "minutes": "minutes",
        "–º": "minutes", "–º–∏–Ω": "minutes", "–º–∏–Ω—É—Ç–∞": "minutes", "–º–∏–Ω—É—Ç—ã": "minutes", "–º–∏–Ω—É—Ç": "minutes",
        "‡∏ô‡∏≤‡∏ó‡∏µ": "minutes", "‡∏ô": "minutes",
        # hours
        "h": "hours", "hr": "hours", "hour": "hours", "hours": "hours",
        "—á": "hours", "—á–∞—Å": "hours", "—á–∞—Å–∞": "hours", "—á–∞—Å–æ–≤": "hours",
        "‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á": "hours", "‡∏ä‡∏°": "hours", "‡∏ä": "hours",
        # days
        "d": "days", "day": "days", "days": "days",
        "–¥": "days", "–¥–µ–Ω—å": "days", "–¥–Ω—è": "days", "–¥–Ω–µ–π": "days",
        "‡∏ß‡∏±‡∏ô": "days",
        # weeks
        "w": "weeks", "wk": "weeks", "week": "weeks", "weeks": "weeks",
        "–Ω": "weeks", "–Ω–µ–¥": "weeks", "–Ω–µ–¥–µ–ª—è": "weeks", "–Ω–µ–¥–µ–ª–∏": "weeks", "–Ω–µ–¥–µ–ª—å": "weeks",
        "‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå": "weeks",
        # months (approx)
        "mo": "days", "mon": "days", "month": "days", "months": "days",
        "–º–µ—Å": "days", "–º–µ—Å—è—Ü": "days", "–º–µ—Å—è—Ü–∞": "days", "–º–µ—Å—è—Ü–µ–≤": "days",
        "‡πÄ‡∏î‡∏∑‡∏≠‡∏ô": "days",
        # years (approx)
        "y": "days", "yr": "days", "year": "days", "years": "days",
        "–≥": "days", "–≥–æ–¥": "days", "–≥–æ–¥–∞": "days", "–ª–µ—Ç": "days",
        "‡∏õ‡∏µ": "days",
    }

    total = timedelta(0)
    for value, unit in prefix:
        if unit not in unit_map:
            break
        kind = unit_map[unit]
        if kind == "seconds":
            total += timedelta(seconds=value)
        elif kind == "minutes":
            total += timedelta(minutes=value)
        elif kind == "hours":
            total += timedelta(hours=value)
        elif kind == "days":
            # –¥–ª—è –º–µ—Å—è—Ü–µ–≤/–ª–µ—Ç –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ
            if unit in {"mo", "mon", "month", "months", "–º–µ—Å", "–º–µ—Å—è—Ü", "–º–µ—Å—è—Ü–∞", "–º–µ—Å—è—Ü–µ–≤", "‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"}:
                total += timedelta(days=30 * value)
            elif unit in {"y", "yr", "year", "years", "–≥", "–≥–æ–¥", "–≥–æ–¥–∞", "–ª–µ—Ç", "‡∏õ‡∏µ"}:
                total += timedelta(days=365 * value)
            else:
                total += timedelta(days=value)
    if total.total_seconds() == 0:
        return None, text.strip()
    return total, remainder


def parse_at_datetime(text: str, tz: timezone) -> Optional[ParsedAt]:
    base = datetime.now(tz)
    # Ensure parser interprets naive times in the user's timezone
    tz_name = getattr(tz, "key", None) or str(tz) or DEFAULT_TZ
    settings = {
        "PREFER_DATES_FROM": "future",
        "RELATIVE_BASE": base,
        "RETURN_AS_TIMEZONE_AWARE": True,
        "TIMEZONE": tz_name,
        "TO_TIMEZONE": tz_name,
    }
    try:
        found = search_dates(text, languages=["ru", "en", "th"], settings=settings)
    except Exception:
        found = None
    dt = None
    matched = None
    if found:
        for match_text, match_dt in found:
            if match_dt is None:
                continue
            matched = match_text
            dt = match_dt
            break
    if dt is None:
        dt = dp_parse(text, languages=["ru", "en", "th"], settings=settings)
        matched = text if dt else None
    if dt is None:
        return None
    # Normalize to user's timezone
    if dt.tzinfo is None:
        dt_local = dt.replace(tzinfo=tz)
    else:
        dt_local = dt.astimezone(tz)
    dt_utc = dt_local.astimezone(timezone.utc)
    return ParsedAt(when_utc=dt_utc, source_text=matched or "")


# =============================
# –°–ª–æ–π –ë–î (sqlite)
# =============================

class ReminderDB:
    def __init__(self, path: str) -> None:
        self.path = path
        self.conn = sqlite3.connect(self.path, check_same_thread=False)
        self.conn.row_factory = sqlite3.Row
        self._ensure_schema()

    def _ensure_schema(self) -> None:
        cur = self.conn.cursor()
        cur.execute(
            """
            CREATE TABLE IF NOT EXISTS reminders (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                chat_id INTEGER NOT NULL,
                user_id INTEGER NOT NULL,
                text TEXT NOT NULL,
                due_at_utc TEXT NOT NULL,
                tz TEXT NOT NULL,
                status TEXT NOT NULL,
                created_at_utc TEXT NOT NULL
            );
            """
        )
        cur.execute("CREATE INDEX IF NOT EXISTS idx_reminders_status_due ON reminders(status, due_at_utc);")
        cur.execute("CREATE INDEX IF NOT EXISTS idx_reminders_user ON reminders(user_id);")
        cur.execute("CREATE INDEX IF NOT EXISTS idx_reminders_chat ON reminders(chat_id);")
        cur.execute(
            """
            CREATE TABLE IF NOT EXISTS user_prefs (
                chat_id INTEGER NOT NULL,
                user_id INTEGER NOT NULL,
                tz TEXT NOT NULL,
                updated_at_utc TEXT NOT NULL,
                lang TEXT DEFAULT 'ru',
                PRIMARY KEY (chat_id, user_id)
            );
            """
        )
        # –ú–∏–≥—Ä–∞—Ü–∏—è: –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É lang, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        try:
            cur.execute("ALTER TABLE user_prefs ADD COLUMN lang TEXT DEFAULT 'ru'")
        except Exception:
            pass
        self.conn.commit()

    async def add_reminder(self, chat_id: int, user_id: int, text: str, due_at_utc: datetime, tz_name: str) -> int:
        def _op():
            cur = self.conn.cursor()
            cur.execute(
                "INSERT INTO reminders(chat_id, user_id, text, due_at_utc, tz, status, created_at_utc) VALUES (?, ?, ?, ?, ?, 'scheduled', ?)",
                (chat_id, user_id, text, due_at_utc.isoformat(), tz_name, now_utc().isoformat()),
            )
            self.conn.commit()
            return cur.lastrowid
        return await asyncio.to_thread(_op)

    async def mark_sent(self, reminder_id: int) -> None:
        def _op():
            cur = self.conn.cursor()
            cur.execute("UPDATE reminders SET status='sent' WHERE id=?", (reminder_id,))
            self.conn.commit()
        await asyncio.to_thread(_op)

    async def cancel(self, reminder_id: int, user_id: int) -> bool:
        def _op() -> bool:
            cur = self.conn.cursor()
            cur.execute("UPDATE reminders SET status='canceled' WHERE id=? AND user_id=? AND status='scheduled'", (reminder_id, user_id))
            self.conn.commit()
            return cur.rowcount > 0
        return await asyncio.to_thread(_op)

    async def get_active_for_user(self, chat_id: int, user_id: int, limit: int = 50) -> List[sqlite3.Row]:
        def _op() -> List[sqlite3.Row]:
            cur = self.conn.cursor()
            cur.execute(
                "SELECT * FROM reminders WHERE chat_id=? AND user_id=? AND status='scheduled' ORDER BY due_at_utc ASC LIMIT ?",
                (chat_id, user_id, limit),
            )
            return cur.fetchall()
        return await asyncio.to_thread(_op)

    async def get_by_id(self, reminder_id: int) -> Optional[sqlite3.Row]:
        def _op() -> Optional[sqlite3.Row]:
            cur = self.conn.cursor()
            cur.execute("SELECT * FROM reminders WHERE id=?", (reminder_id,))
            return cur.fetchone()
        return await asyncio.to_thread(_op)

    async def load_scheduled(self) -> List[sqlite3.Row]:
        def _op() -> List[sqlite3.Row]:
            cur = self.conn.cursor()
            cur.execute("SELECT * FROM reminders WHERE status='scheduled'")
            return cur.fetchall()
        return await asyncio.to_thread(_op)

    async def update_due(self, reminder_id: int, user_id: int, new_due_at_utc: datetime) -> bool:
        def _op() -> bool:
            cur = self.conn.cursor()
            cur.execute(
                "UPDATE reminders SET due_at_utc=?, status='scheduled' WHERE id=? AND user_id=? AND status='scheduled'",
                (new_due_at_utc.isoformat(), reminder_id, user_id),
            )
            self.conn.commit()
            return cur.rowcount > 0
        return await asyncio.to_thread(_op)

    async def get_user_tz(self, chat_id: int, user_id: int) -> Optional[str]:
        def _op() -> Optional[str]:
            cur = self.conn.cursor()
            cur.execute("SELECT tz FROM user_prefs WHERE chat_id=? AND user_id=?", (chat_id, user_id))
            row = cur.fetchone()
            return row["tz"] if row else None
        return await asyncio.to_thread(_op)

    async def set_user_tz(self, chat_id: int, user_id: int, tz_name: str) -> None:
        def _op() -> None:
            cur = self.conn.cursor()
            cur.execute(
                "INSERT INTO user_prefs(chat_id, user_id, tz, updated_at_utc, lang) VALUES (?, ?, ?, ?, COALESCE((SELECT lang FROM user_prefs WHERE chat_id=? AND user_id=?),'ru')) "
                "ON CONFLICT(chat_id, user_id) DO UPDATE SET tz=excluded.tz, updated_at_utc=excluded.updated_at_utc",
                (chat_id, user_id, tz_name, now_utc().isoformat(), chat_id, user_id),
            )
            self.conn.commit()
        await asyncio.to_thread(_op)

    async def get_user_lang(self, chat_id: int, user_id: int) -> Optional[str]:
        def _op() -> Optional[str]:
            cur = self.conn.cursor()
            cur.execute("SELECT lang FROM user_prefs WHERE chat_id=? AND user_id=?", (chat_id, user_id))
            row = cur.fetchone()
            return row["lang"] if row else None
        return await asyncio.to_thread(_op)

    async def set_user_lang(self, chat_id: int, user_id: int, lang: str) -> None:
        def _op() -> None:
            cur = self.conn.cursor()
            cur.execute(
                "INSERT INTO user_prefs(chat_id, user_id, tz, updated_at_utc, lang) VALUES (?, ?, ?, ?, ?) "
                "ON CONFLICT(chat_id, user_id) DO UPDATE SET lang=excluded.lang, updated_at_utc=excluded.updated_at_utc",
                (chat_id, user_id, DEFAULT_TZ, now_utc().isoformat(), lang),
            )
            self.conn.commit()
        await asyncio.to_thread(_op)

    async def get_user_sound(self, chat_id: int, user_id: int) -> bool:
        def _op() -> bool:
            cur = self.conn.cursor()
            try:
                cur.execute("SELECT sound FROM user_prefs WHERE chat_id=? AND user_id=?", (chat_id, user_id))
                row = cur.fetchone()
                if row is None:
                    return True
                val = row["sound"] if isinstance(row, sqlite3.Row) else row[0]
                return bool(int(val)) if isinstance(val, str) else bool(val)
            except Exception:
                return True
        return await asyncio.to_thread(_op)

    async def set_user_sound(self, chat_id: int, user_id: int, on: bool) -> None:
        def _op() -> None:
            cur = self.conn.cursor()
            try:
                cur.execute("ALTER TABLE user_prefs ADD COLUMN sound INTEGER DEFAULT 1")
            except Exception:
                pass
            cur.execute(
                "INSERT INTO user_prefs(chat_id, user_id, tz, updated_at_utc, lang, sound) VALUES (?, ?, ?, ?, COALESCE((SELECT lang FROM user_prefs WHERE chat_id=? AND user_id=?),'ru'), ?) "
                "ON CONFLICT(chat_id, user_id) DO UPDATE SET sound=excluded.sound, updated_at_utc=excluded.updated_at_utc",
                (chat_id, user_id, DEFAULT_TZ, now_utc().isoformat(), chat_id, user_id, 1 if on else 0),
            )
            self.conn.commit()
        await asyncio.to_thread(_op)


# =============================
# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (APScheduler)
# =============================

class ReminderScheduler:
    def __init__(self, app: Application, db: ReminderDB) -> None:
        self.app = app
        self.db = db
        self.scheduler = AsyncIOScheduler(timezone=timezone.utc)
        self.started = False

    def start(self) -> None:
        if not self.started:
            self.scheduler.start()
            self.started = True
            logger.info("APScheduler started")

    def shutdown(self) -> None:
        if self.started:
            self.scheduler.shutdown(wait=False)
            self.started = False
            logger.info("APScheduler stopped")

    def schedule_reminder(self, reminder_id: int, chat_id: int, text: str, when_utc: datetime) -> None:
        job_id = f"reminder:{reminder_id}"
        try:
            self.scheduler.remove_job(job_id)
        except Exception:
            pass
        trigger = DateTrigger(run_date=when_utc)
        self.scheduler.add_job(
            self._deliver_job,
            trigger=trigger,
            id=job_id,
            kwargs={"reminder_id": reminder_id, "chat_id": chat_id, "text": text},
            misfire_grace_time=60 * 60 * 24,
            coalesce=True,
            max_instances=5,
        )
        logger.info("Scheduled reminder id=%s at %s UTC", reminder_id, when_utc.isoformat())

    async def _deliver_job(self, reminder_id: int, chat_id: int, text: str) -> None:
        try:
            # –ü—Ä–∏ –¥–æ—Å—Ç–∞–≤–∫–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ snooze
            lang = DEFAULT_LANG
            try:
                row = await self.db.get_by_id(reminder_id)
                if row:
                    user_id = int(row["user_id"])
                    lang = await self.db.get_user_lang(chat_id, user_id) or DEFAULT_LANG
            except Exception:
                pass
            # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–≤—É–∫
            row = await self.db.get_by_id(reminder_id)
            disable = False
            try:
                if row:
                    disable = not (await self.db.get_user_sound(chat_id, int(row["user_id"])))
            except Exception:
                pass
            await self.app.bot.send_message(chat_id=chat_id, text=text, reply_markup=inline_snooze_menu(lang, reminder_id), disable_notification=disable)
        except Exception:
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è reminder_id=%s", reminder_id)
        # –ù–µ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ sent ‚Äî –±—É–¥–µ–º –ø–æ–≤—Ç–æ—Ä—è—Ç—å –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç–º–µ—Ç–∏—Ç "–ø—Ä–æ—á–∏—Ç–∞–Ω–æ"/snooze
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –¥–æ—Å—Ç–∞–≤–∫—É —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è
            self.scheduler.add_job(
                self._repeat_check,
                trigger=DateTrigger(run_date=now_utc() + timedelta(minutes=5)),
                kwargs={"reminder_id": reminder_id, "chat_id": chat_id, "text": text},
                id=f"repeat:{reminder_id}:{int(datetime.now().timestamp())}",
                coalesce=True,
                misfire_grace_time=600,
            )
        except Exception:
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä reminder_id=%s", reminder_id)

    async def _repeat_check(self, reminder_id: int, chat_id: int, text: str) -> None:
        try:
            row = await self.db.get_by_id(reminder_id)
            if not row or row["status"] != "scheduled":
                return
            # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
            lang = DEFAULT_LANG
            try:
                if row:
                    user_id = int(row["user_id"])
                    lang = await self.db.get_user_lang(chat_id, user_id) or DEFAULT_LANG
            except Exception:
                pass
            disable = False
            try:
                if row:
                    disable = not (await self.db.get_user_sound(chat_id, int(row["user_id"])))
            except Exception:
                pass
            await self.app.bot.send_message(chat_id=chat_id, text=text, reply_markup=inline_snooze_menu(lang, reminder_id), disable_notification=disable)
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
            self.scheduler.add_job(
                self._repeat_check,
                trigger=DateTrigger(run_date=now_utc() + timedelta(minutes=5)),
                kwargs={"reminder_id": reminder_id, "chat_id": chat_id, "text": text},
                id=f"repeat:{reminder_id}:{int(datetime.now().timestamp())}",
                coalesce=True,
                misfire_grace_time=600,
            )
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏ reminder_id=%s", reminder_id)


# =============================
# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
# =============================

class BotHandlers:
    def __init__(self, app: Application, db: ReminderDB, sched: ReminderScheduler, tz_name: str) -> None:
        self.app = app
        self.db = db
        self.sched = sched
        self.default_tz_name = tz_name
        self.default_lang = DEFAULT_LANG

    async def _get_user_tz(self, chat_id: int, user_id: int) -> Tuple[str, timezone]:
        tz_name = await self.db.get_user_tz(chat_id, user_id)
        if not tz_name:
            tz_name = self.default_tz_name
        return tz_name, get_tz(tz_name)

    async def _get_user_lang(self, chat_id: int, user_id: int) -> str:
        lang = await self.db.get_user_lang(chat_id, user_id)
        return (lang or self.default_lang).lower()

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        try:
            chat_id = update.effective_chat.id
            user_id = update.effective_user.id
            tz_name, _ = await self._get_user_tz(chat_id, user_id)
            lang = await self._get_user_lang(chat_id, user_id)
            msg = t(lang, "help", tz=tz_name, lang=lang, def_lang=self.default_lang)
            # –í–µ—Ä–Ω—ë–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–≤—Ç–æ-–∫–æ–º–∞–Ω–¥
            webapp_url = os.getenv("REMIND_WEBAPP_URL")
            await update.effective_message.reply_text(msg, reply_markup=main_menu(lang, webapp_url))
            try:
                await update.effective_message.reply_text(t(lang, "choose_action"), reply_markup=inline_main_menu(lang, webapp_url))
            except Exception:
                pass
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –≤ /start")

    async def cmd_lang(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        msg = update.effective_message
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id
        arg = None
        if context.args:
            arg = " ".join(context.args).strip().lower()
        try:
            current = await self._get_user_lang(chat_id, user_id)
            if not arg:
                # –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
                await msg.reply_text(t(current, "choose_lang"), reply_markup=inline_lang_menu(current))
                return
            if arg not in {"ru", "th", "en"}:
                await msg.reply_text(t(current, "lang_bad"), reply_markup=inline_lang_menu(current))
                return
            await self.db.set_user_lang(chat_id, user_id, arg)
            await msg.reply_text(t(arg, "lang_ok", lang=arg), reply_markup=inline_lang_menu(arg))
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –≤ /lang")
            await msg.reply_text(t("ru", "error"))

    async def cmd_tz(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        msg = update.effective_message
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id
        arg = None
        if context.args:
            arg = " ".join(context.args).strip()
        try:
            lang = await self._get_user_lang(chat_id, user_id)
            if not arg:
                # –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤
                await msg.reply_text(t(lang, "choose_tz"), reply_markup=inline_tz_menu(lang))
                return
            candidate = arg
            if not is_valid_tz(candidate):
                await msg.reply_text(t(lang, "tz_bad"))
                return
            await self.db.set_user_tz(chat_id, user_id, candidate)
            await msg.reply_text(t(lang, "tz_ok", tz=candidate))
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –≤ /tz")
            await msg.reply_text(t("ru", "error"))

    async def cmd_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        msg = update.effective_message
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id
        try:
            lang = await self._get_user_lang(chat_id, user_id)
            webapp_url = os.getenv("REMIND_WEBAPP_URL")
            await msg.reply_text(t(lang, "choose_action"), reply_markup=inline_main_menu(lang, webapp_url))
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –≤ /menu")

    async def cmd_in(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        msg = update.effective_message
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id
        args_text = (msg.text or "").split(maxsplit=1)
        text_tail = args_text[1] if len(args_text) > 1 else ""
        try:
            lang = await self._get_user_lang(chat_id, user_id)
            # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "/in (min)" –∏–∑ –æ–±—ã—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ‚Äî –æ—Ç–∫—Ä–æ–µ–º —Å–ø–∏—Å–æ–∫ –º–∏–Ω—É—Ç
            if text_tail.strip().lower() == "(min)":
                await msg.reply_text(t(lang, "choose_in_min"), reply_markup=inline_minutes_menu_for_in(lang))
                return
            tz_name, tz = await self._get_user_tz(chat_id, user_id)
            delta, remainder = parse_duration_prefix(text_tail)
            if not delta:
                await msg.reply_text(t(lang, "need_duration"))
                return
            if not remainder:
                await msg.reply_text(t(lang, "empty_text"))
                return
            when_local = datetime.now(tz) + delta
            when_utc = when_local.astimezone(timezone.utc)
            if when_utc <= now_utc():
                await msg.reply_text(t(lang, "time_passed"))
                return
            reminder_id = await self.db.add_reminder(chat_id, user_id, remainder, when_utc, tz_name)
            self.sched.schedule_reminder(reminder_id, chat_id, remainder, when_utc)
            await msg.reply_text(
                t(lang, "in_ok", delta=format_timedelta_brief_localized(lang, delta), when_local=when_local.strftime('%Y-%m-%d %H:%M'), tz=tz_name, rid=reminder_id)
            )
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –≤ /in")
            await msg.reply_text(t("ru", "error"))

    async def cmd_at(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        msg = update.effective_message
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id
        args_text = (msg.text or "").split(maxsplit=1)
        text_tail = args_text[1] if len(args_text) > 1 else ""
        try:
            lang = await self._get_user_lang(chat_id, user_id)
            # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "/at (hh:mm)" –∏–∑ –æ–±—ã—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ‚Äî –æ—Ç–∫—Ä–æ–µ–º –≤—ã–±–æ—Ä –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏
            if text_tail.strip().lower() == "(hh:mm)":
                await msg.reply_text(t(lang, "choose_at_date"), reply_markup=inline_dates_menu(lang))
                return
            if not text_tail:
                await msg.reply_text(t(lang, "at_need"))
                return
            tz_name, tz = await self._get_user_tz(chat_id, user_id)
            parsed = parse_at_datetime(text_tail, tz)
            if not parsed:
                await msg.reply_text(t(lang, "at_unparsed"))
                return
            reminder_text = text_tail
            if parsed.source_text:
                idx = reminder_text.lower().find(parsed.source_text.lower())
                if idx >= 0:
                    reminder_text = (reminder_text[:idx] + reminder_text[idx + len(parsed.source_text):]).strip(
                        ", .;:-"
                    )
            if not reminder_text:
                await msg.reply_text(t(lang, "at_empty"))
                return
            when_utc = parsed.when_utc
            when_local = when_utc.astimezone(tz)
            if when_utc <= now_utc():
                await msg.reply_text(t(lang, "at_past"))
                return
            reminder_id = await self.db.add_reminder(chat_id, user_id, reminder_text, when_utc, tz_name)
            self.sched.schedule_reminder(reminder_id, chat_id, reminder_text, when_utc)
            delta = when_utc - now_utc()
            await msg.reply_text(
                t(lang, "at_ok", when_local=when_local.strftime('%Y-%m-%d %H:%M'), tz=tz_name, delta=format_timedelta_brief_localized(lang, delta), rid=reminder_id)
            )
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –≤ /at")
            await msg.reply_text(t("ru", "error"))

    async def cmd_list(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        msg = update.effective_message
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id
        try:
            lang = await self._get_user_lang(chat_id, user_id)
            tz_name, tz = await self._get_user_tz(chat_id, user_id)
            rows = await self.db.get_active_for_user(chat_id, user_id, limit=50)
            if not rows:
                await msg.reply_text(t(lang, "list_empty"))
                return
            lines = [t(lang, "list_header", tz=tz_name)]
            for r in rows:
                when_utc = datetime.fromisoformat(r["due_at_utc"]).astimezone(timezone.utc)
                when_local = when_utc.astimezone(tz)
                delta = when_utc - now_utc()
                lines.append(f"ID {r['id']}: {when_local.strftime('%Y-%m-%d %H:%M')} ({tz_name}) ‚Äî {format_timedelta_brief_localized(lang, delta)} ‚Äî {r['text']}")
            await msg.reply_text("\n".join(lines), reply_markup=inline_rid_menu(lang, rows, action="watch"))
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –≤ /list")
            await msg.reply_text(t("ru", "error"))

    async def cmd_cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        msg = update.effective_message
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id
        args = (msg.text or "").split(maxsplit=1)
        try:
            lang = await self._get_user_lang(chat_id, user_id)
            if len(args) < 2:
                await msg.reply_text(t(lang, "cancel_need"))
                return
            try:
                rid = int(args[1].strip())
            except ValueError:
                await msg.reply_text(t(lang, "cancel_nan"))
                return
            await self._cancel_id(chat_id, user_id, rid, msg, lang)
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –≤ /cancel")
            await msg.reply_text(t("ru", "error"))

    async def cmd_snooze(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        msg = update.effective_message
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id
        raw = (msg.text or "")
        try:
            lang = await self._get_user_lang(chat_id, user_id)
            parts = raw.split(maxsplit=2)
            if len(parts) < 3:
                await msg.reply_text(t(lang, "snooze_need"))
                return
            try:
                rid = int(parts[1])
            except ValueError:
                await msg.reply_text(t(lang, "snooze_need"))
                return
            duration_text = parts[2]
            delta, _ = parse_duration_prefix(duration_text)
            if not delta:
                await msg.reply_text(t(lang, "snooze_need"))
                return
            tz_name, tz = await self._get_user_tz(chat_id, user_id)
            row = await self.db.get_by_id(rid)
            if not row or int(row["chat_id"]) != chat_id or int(row["user_id"]) != user_id or row["status"] != "scheduled":
                await msg.reply_text(t(lang, "cancel_not_found"))
                return
            new_when_local = datetime.now(tz) + delta
            new_when_utc = new_when_local.astimezone(timezone.utc)
            if new_when_utc <= now_utc():
                await msg.reply_text(t(lang, "time_passed"))
                return
            ok = await self.db.update_due(rid, user_id, new_when_utc)
            if not ok:
                await msg.reply_text(t(lang, "cancel_not_found"))
                return
            self.sched.schedule_reminder(rid, chat_id, row["text"], new_when_utc)
            await msg.reply_text(
                t(lang, "snooze_ok", when_local=new_when_local.strftime('%Y-%m-%d %H:%M'), tz=tz_name, delta=format_timedelta_brief_localized(lang, new_when_utc - now_utc()), rid=rid)
            )
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –≤ /snooze")
            await msg.reply_text(t("ru", "error"))

    async def _tick(self, context: ContextTypes.DEFAULT_TYPE) -> None:
        data = context.job.data or {}
        chat_id = data.get("chat_id")
        message_id = data.get("message_id")
        rid = data.get("rid")
        lang = data.get("lang") or self.default_lang
        try:
            row = await self.db.get_by_id(rid)
            if not row or row["status"] != "scheduled":
                try:
                    await self.app.bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=t(lang, "cancel_not_found"))
                except Exception:
                    pass
                context.job.schedule_removal()
                return
            when_utc = datetime.fromisoformat(row["due_at_utc"]).astimezone(timezone.utc)
            tz_name, tz = await self._get_user_tz(chat_id, row["user_id"])  # type: ignore
            when_local = when_utc.astimezone(tz)
            delta = when_utc - now_utc()
            if delta.total_seconds() <= 0:
                try:
                    await self.app.bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=t(lang, "at_ok", when_local=when_local.strftime('%Y-%m-%d %H:%M'), tz=tz_name, delta=format_timedelta_brief_localized(lang, timedelta(0)), rid=row["id"]))
                except Exception:
                    pass
                context.job.schedule_removal()
                return
            text = f"‚è≥ ID {row['id']}: {when_local.strftime('%Y-%m-%d %H:%M')} ({tz_name}) ‚Äî {format_timedelta_brief_localized(lang, delta)}"
            try:
                await self.app.bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=text)
            except Exception:
                pass
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ /watch")

    async def _watch_id(self, chat_id: int, user_id: int, rid: int, msg, lang: str) -> None:
        row = await self.db.get_by_id(rid)
        if not row or int(row["chat_id"]) != chat_id:
            await msg.reply_text(t(lang, "cancel_not_found"))
            return
        when_utc = datetime.fromisoformat(row["due_at_utc"]).astimezone(timezone.utc)
        tz_name, tz = await self._get_user_tz(chat_id, user_id)
        when_local = when_utc.astimezone(tz)
        delta = when_utc - now_utc()
        m = await msg.reply_text(f"‚è≥ ID {rid}: {when_local.strftime('%Y-%m-%d %H:%M')} ({tz_name}) ‚Äî {format_timedelta_brief_localized(lang, delta)}")
        self.app.job_queue.run_repeating(self._tick, interval=60, first=60, data={"chat_id": chat_id, "message_id": m.message_id, "rid": rid, "lang": lang})

    async def _cancel_id(self, chat_id: int, user_id: int, rid: int, msg, lang: str) -> None:
        ok = await self.db.cancel(rid, user_id)
        if ok:
            try:
                self.sched.scheduler.remove_job(f"reminder:{rid}")
            except Exception:
                pass
            await msg.reply_text(t(lang, "cancel_ok", rid=rid))
        else:
            await msg.reply_text(t(lang, "cancel_not_found"))

    async def cmd_watch(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        msg = update.effective_message
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id
        args = (msg.text or "").split(maxsplit=1)
        try:
            lang = await self._get_user_lang(chat_id, user_id)
            if len(args) < 2:
                # –ø–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
                rows = await self.db.get_active_for_user(chat_id, user_id, limit=20)
                if not rows:
                    await msg.reply_text(t(lang, "list_empty"))
                    return
                await msg.reply_text(t(lang, "choose_watch"), reply_markup=inline_rid_menu(lang, rows, action="watch"))
                return
            rid = int(args[1].strip())
            await self._watch_id(chat_id, user_id, rid, msg, lang)
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –≤ /watch")
            await msg.reply_text(t("ru", "error"))

    # –†–µ—Å—Ç–∞—Ä—Ç (—É–¥–∞–ª–µ–Ω–∏–µ –ë–î) ‚Äî –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ
    async def bot_restart(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        msg = update.effective_message
        try:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: —Ä–∞–∑—Ä–µ—à–∏–º —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É —á–∞—Ç–∞ (–ª–∏—á–∫–∞) –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é-–∞–¥–º–∏–Ω—É –ø–æ env
            admin_raw = os.getenv("REMIND_ADMIN_ID")
            if admin_raw:
                allowed = [a.strip().lower() for a in admin_raw.split(",") if a.strip()]
                uid = str(update.effective_user.id)
                uname = ("@" + (update.effective_user.username or "")).lower()
                if uid.lower() not in allowed and uname not in allowed:
                    await msg.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
                    return
            # –û—Å—Ç–∞–Ω–æ–≤–∏–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            self.sched.shutdown()
            # –£–¥–∞–ª–∏–º –ë–î
            try:
                if os.path.exists(DB_PATH):
                    os.remove(DB_PATH)
            except Exception:
                logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ë–î")
            # –û—Ç–≤–µ—Ç
            await msg.reply_text("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫... –ë–∞–∑–∞ –æ—á–∏—â–µ–Ω–∞.")
            # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–µ—Å—Ç–∞—Ä—Ç —á–µ—Ä–µ–∑ systemd
            try:
                import subprocess
                subprocess.Popen(["/bin/systemctl", "restart", "remind-bot"])  # type: ignore
                return
            except Exception:
                pass
            # –ï—Å–ª–∏ systemd –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –∑–∞–≤–µ—Ä—à–∏–º –ø—Ä–æ—Ü–µ—Å—Å
            os._exit(0)
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –≤ /botrestart")
            await msg.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞")


# =============================
# –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª: –∑–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö
# =============================

async def reload_and_schedule(app: Application, db: ReminderDB, sched: ReminderScheduler, tz_name: str) -> None:
    tz = get_tz(tz_name)
    rows = await db.load_scheduled()
    if not rows:
        return
    sent_immediately = 0
    for r in rows:
        rid = int(r["id"]) 
        chat_id = int(r["chat_id"]) 
        text = str(r["text"]) 
        when_utc = datetime.fromisoformat(r["due_at_utc"]).astimezone(timezone.utc)
        if when_utc <= now_utc():
            try:
                try:
                    # –ü—Ä–µ—Ñ–∏–∫—Å "–ø–æ–∑–¥–Ω–æ" ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å —á–µ—Ä–µ–∑ t()
                    await app.bot.send_message(chat_id=chat_id, text=t(DEFAULT_LANG, "late_prefix") + text)
                except Exception:
                    logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ id=%s", rid)
                await db.mark_sent(rid)
                sent_immediately += 1
            except Exception:
                logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è id=%s", rid)
        else:
            sched.schedule_reminder(rid, chat_id, text, when_utc)
    if sent_immediately:
        logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Å—Ä–∞–∑—É: %s", sent_immediately)


# =============================
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# =============================

async def on_startup(app: Application) -> None:
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    try:
        # –ü–æ–¥—Å–∫–∞–∑–∫–∏ –∫–æ–º–∞–Ω–¥ –≤ –º–µ–Ω—é Telegram
        await app.bot.set_my_commands([
            BotCommand("start", "Start / Help"),
            BotCommand("menu", "Open inline menu"),
            BotCommand("in", "Remind after duration"),
            BotCommand("at", "Remind at time"),
            BotCommand("snooze", "Postpone reminder"),
            BotCommand("list", "List reminders"),
            BotCommand("watch", "Watch reminder"),
            BotCommand("cancel", "Cancel reminder by id"),
            BotCommand("tz", "Show/Set timezone"),
            BotCommand("lang", "Show/Set language"),
        ])
    except Exception:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é")

async def on_post_init(app: Application, db: ReminderDB, sched: ReminderScheduler, tz_name: str) -> None:
    sched.start()
    await reload_and_schedule(app, db, sched, tz_name)

async def on_shutdown(app: Application, sched: ReminderScheduler) -> None:
    logger.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫...")
    sched.shutdown()


def build_application() -> Application:
    if not BOT_TOKEN:
        logger.error("–ù–µ –∑–∞–¥–∞–Ω TELEGRAM_BOT_TOKEN –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –∏–ª–∏ —Ñ–∞–π–ª–µ .telegram_token")
        raise SystemExit(1)

    application = ApplicationBuilder().token(BOT_TOKEN).build()

    db = ReminderDB(DB_PATH)
    sched = ReminderScheduler(application, db)
    handlers = BotHandlers(application, db, sched, DEFAULT_TZ)

    application.add_handler(CommandHandler("start", handlers.start))
    application.add_handler(CommandHandler("help", handlers.start))
    application.add_handler(CommandHandler("in", handlers.cmd_in))
    application.add_handler(CommandHandler("at", handlers.cmd_at))
    application.add_handler(CommandHandler("list", handlers.cmd_list))
    application.add_handler(CommandHandler("cancel", handlers.cmd_cancel))
    application.add_handler(CommandHandler("tz", handlers.cmd_tz))
    application.add_handler(CommandHandler("lang", handlers.cmd_lang))
    application.add_handler(CommandHandler("watch", handlers.cmd_watch))
    application.add_handler(CommandHandler("snooze", handlers.cmd_snooze))
    application.add_handler(CommandHandler("menu", handlers.cmd_menu))
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ at/in
    async def on_free_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        msg = update.effective_message
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id
        try:
            lang = await handlers._get_user_lang(chat_id, user_id)
            pending_hhmm = context.user_data.get("pending_at_hhmm")
            pending_in = context.user_data.get("pending_in_min")
            text = (msg.text or "").strip()
            if pending_hhmm:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —á–∞—Å:–º–∏–Ω –∏ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∞), –∏–Ω–∞—á–µ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                tz_name, tz = await handlers._get_user_tz(chat_id, user_id)
                now_loc = datetime.now(tz)
                hh, mm = pending_hhmm.split(":", 1)
                date_part = context.user_data.pop("pending_at_date", None)
                if date_part:
                    try:
                        y, m, d = [int(x) for x in date_part.split("-")]
                        base_date = now_loc.replace(year=y, month=m, day=d)
                    except Exception:
                        base_date = now_loc
                else:
                    base_date = now_loc
                dt_local = base_date.replace(hour=int(hh), minute=int(mm), second=0, microsecond=0)
                if dt_local <= now_loc:
                    dt_local = dt_local + timedelta(days=1)
                when_utc = dt_local.astimezone(timezone.utc)
                reminder_id = await handlers.db.add_reminder(chat_id, user_id, text, when_utc, tz_name)
                handlers.sched.schedule_reminder(reminder_id, chat_id, text, when_utc)
                await msg.reply_text(
                    t(lang, "at_ok", when_local=dt_local.strftime('%Y-%m-%d %H:%M'), tz=tz_name, delta=format_timedelta_brief_localized(lang, when_utc - now_utc()), rid=reminder_id)
                )
                context.user_data.pop("pending_at_hhmm", None)
                return
            if pending_in:
                tz_name, tz = await handlers._get_user_tz(chat_id, user_id)
                delta = timedelta(minutes=int(pending_in))
                when_local = datetime.now(tz) + delta
                when_utc = when_local.astimezone(timezone.utc)
                reminder_id = await handlers.db.add_reminder(chat_id, user_id, text, when_utc, tz_name)
                handlers.sched.schedule_reminder(reminder_id, chat_id, text, when_utc)
                await msg.reply_text(
                    t(lang, "in_ok", delta=format_timedelta_brief_localized(lang, delta), when_local=when_local.strftime('%Y-%m-%d %H:%M'), tz=tz_name, rid=reminder_id)
                )
                context.user_data.pop("pending_in_min", None)
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∞ at/in")

    application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), on_free_text))

    # Callback handlers (inline)
    async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        q = update.callback_query
        if not q:
            return
        await q.answer()
        chat_id = q.message.chat.id  # type: ignore
        user_id = q.from_user.id  # type: ignore
        lang = await handlers._get_user_lang(chat_id, user_id)
        data = q.data or ""
        try:
            if data == "back":
                try:
                    await q.edit_message_reply_markup(reply_markup=inline_main_menu(lang))
                except Exception:
                    pass
                return
            if data == "list":
                rows = await handlers.db.get_active_for_user(chat_id, user_id, limit=20)
                if not rows:
                    await q.edit_message_text(t(lang, "list_empty"), reply_markup=inline_main_menu(lang))
                    return
                await q.edit_message_text(t(lang, "list_header", tz=(await handlers._get_user_tz(chat_id, user_id))[0]), reply_markup=inline_rid_menu(lang, rows, action="watch"))
                return
            if data == "open:watch":
                rows = await handlers.db.get_active_for_user(chat_id, user_id, limit=20)
                if not rows:
                    await q.edit_message_text(t(lang, "list_empty"), reply_markup=inline_main_menu(lang))
                    return
                await q.edit_message_text(t(lang, "choose_watch"), reply_markup=inline_rid_menu(lang, rows, action="watch"))
                return
            if data == "open:cancel":
                rows = await handlers.db.get_active_for_user(chat_id, user_id, limit=20)
                if not rows:
                    await q.edit_message_text(t(lang, "list_empty"), reply_markup=inline_main_menu(lang))
                    return
                await q.edit_message_text(t(lang, "choose_cancel"), reply_markup=inline_rid_menu(lang, rows, action="cancel"))
                return
            if data == "open:lang":
                await q.edit_message_text(t(lang, "choose_lang"), reply_markup=inline_lang_menu(lang))
                return
            if data == "open:tz":
                await q.edit_message_text(t(lang, "choose_tz"), reply_markup=inline_tz_menu(lang))
                return
            if data == "open:sound":
                kb = InlineKeyboardMarkup([
                    [InlineKeyboardButton(text=t(lang, "sound_on"), callback_data="sound:set:1"), InlineKeyboardButton(text=t(lang, "sound_off"), callback_data="sound:set:0")],
                    [InlineKeyboardButton(text=t(lang, "btn_back"), callback_data="back")],
                ])
                await q.edit_message_text(t(lang, "choose_sound"), reply_markup=kb)
                return
            if data == "open:at":
                await q.edit_message_text(t(lang, "choose_at_date"), reply_markup=inline_dates_menu(lang))
                return
            if data.startswith("at_date:"):
                date_str = data.split(":", 1)[1]
                context.user_data["pending_at_date"] = date_str
                await q.edit_message_text(t(lang, "choose_at_hour"), reply_markup=inline_hours_menu(lang))
                return
            if data == "open:in":
                await q.edit_message_text(t(lang, "choose_in_min"), reply_markup=inline_minutes_menu_for_in(lang))
                return
            if data.startswith("at_hh:"):
                hh = data.split(":", 1)[1]
                await q.edit_message_text(t(lang, "choose_at_min"), reply_markup=inline_minutes_menu_for_at(lang, hh))
                return
            if data.startswith("at_set:"):
                _, hh, mm = data.split(":", 2)
                # –°–æ—Ö—Ä–∞–Ω–∏–º intention –≤ user_data –∏ –ø–æ–ø—Ä–æ—Å–∏–º —Ç–µ–∫—Å—Ç
                context.user_data["pending_at_hhmm"] = f"{hh}:{mm}"
                await q.edit_message_text(t(lang, "enter_text"))
                return
            if data.startswith("in_set:"):
                minutes = data.split(":", 1)[1]
                context.user_data["pending_in_min"] = int(minutes)
                await q.edit_message_text(t(lang, "enter_text"))
                return
            if data.startswith("lang:"):
                new_lang = data.split(":", 1)[1]
                if new_lang in {"ru", "th", "en"}:
                    await handlers.db.set_user_lang(chat_id, user_id, new_lang)
                    lang = new_lang
                    await q.edit_message_text(t(lang, "lang_ok", lang=lang), reply_markup=inline_main_menu(lang))
                else:
                    await q.edit_message_text(t(lang, "lang_bad"), reply_markup=inline_main_menu(lang))
                return
            if data.startswith("tz:"):
                tz_name = data.split(":", 1)[1]
                if is_valid_tz(tz_name):
                    await handlers.db.set_user_tz(chat_id, user_id, tz_name)
                    await q.edit_message_text(t(lang, "tz_ok", tz=tz_name), reply_markup=inline_main_menu(lang))
                else:
                    await q.edit_message_text(t(lang, "tz_bad"), reply_markup=inline_main_menu(lang))
                return
            if data.startswith("sound:set:"):
                on = data.endswith(":1")
                await handlers.db.set_user_sound(chat_id, user_id, on)
                await q.edit_message_text(t(lang, "choose_sound"), reply_markup=inline_main_menu(lang))
                return
            if data.startswith("watch:"):
                rid = int(data.split(":", 1)[1])
                await handlers._watch_id(chat_id, user_id, rid, q.message, lang)  # type: ignore
                return
            if data.startswith("cancel:"):
                rid = int(data.split(":", 1)[1])
                await handlers._cancel_id(chat_id, user_id, rid, q.message, lang)  # type: ignore
                return
            if data.startswith("done:"):
                rid = int(data.split(":", 1)[1])
                # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ sent (–ø—Ä–æ—á–∏—Ç–∞–Ω–æ) –∏ —Å–Ω–∏–º–∞–µ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
                try:
                    await handlers.db.mark_sent(rid)
                except Exception:
                    pass
                await q.edit_message_reply_markup(reply_markup=None)
                return
            if data.startswith("snooze_do:"):
                _, rid, mins = data.split(":", 2)
                rid = int(rid)
                mins = int(mins)
                row = await handlers.db.get_by_id(rid)
                if not row or int(row["chat_id"]) != chat_id or row["status"] != "scheduled":
                    await q.edit_message_text(t(lang, "cancel_not_found"))
                    return
                tz_name, tz = await handlers._get_user_tz(chat_id, int(row["user_id"]))
                new_when_local = datetime.now(tz) + timedelta(minutes=mins)
                new_when_utc = new_when_local.astimezone(timezone.utc)
                ok = await handlers.db.update_due(rid, int(row["user_id"]), new_when_utc)
                if ok:
                    handlers.sched.schedule_reminder(rid, chat_id, row["text"], new_when_utc)
                    await q.edit_message_text(t(lang, "snooze_ok", when_local=new_when_local.strftime('%Y-%m-%d %H:%M'), tz=tz_name, delta=format_timedelta_brief_localized(lang, new_when_utc - now_utc()), rid=rid))
                else:
                    await q.edit_message_text(t(lang, "cancel_not_found"))
                return
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –≤ callback")

    application.add_handler(CallbackQueryHandler(on_callback))
    # –†–µ—Å—Ç–∞—Ä—Ç (—É–¥–∞–ª–µ–Ω–∏–µ –ë–î) ‚Äî –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ
    async def bot_restart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        msg = update.effective_message
        try:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: —Ä–∞–∑—Ä–µ—à–∏–º —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É —á–∞—Ç–∞ (–ª–∏—á–∫–∞) –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é-–∞–¥–º–∏–Ω—É –ø–æ env
            admin_id = os.getenv("REMIND_ADMIN_ID")
            if admin_id and str(update.effective_user.id) != str(admin_id):
                await msg.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
                return
            # –û—Å—Ç–∞–Ω–æ–≤–∏–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            sched.shutdown()
            # –£–¥–∞–ª–∏–º –ë–î
            try:
                if os.path.exists(DB_PATH):
                    os.remove(DB_PATH)
            except Exception:
                logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ë–î")
            # –û—Ç–≤–µ—Ç
            await msg.reply_text("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫... –ë–∞–∑–∞ –æ—á–∏—â–µ–Ω–∞.")
            # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–µ—Å—Ç–∞—Ä—Ç —á–µ—Ä–µ–∑ systemd
            try:
                import subprocess
                subprocess.Popen(["/bin/systemctl", "restart", "remind-bot"])  # type: ignore
                return
            except Exception:
                pass
            # –ï—Å–ª–∏ systemd –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –∑–∞–≤–µ—Ä—à–∏–º –ø—Ä–æ—Ü–µ—Å—Å
            os._exit(0)
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –≤ /botrestart")
            await msg.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞")

    application.add_handler(CommandHandler("botrestart", bot_restart))

    async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
        logger.exception("–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ", exc_info=context.error)
        try:
            if isinstance(update, Update) and update.effective_message:
                # –ø–æ–ø—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
                try:
                    chat_id = update.effective_chat.id
                    user_id = update.effective_user.id
                    lang = await db.get_user_lang(chat_id, user_id) or DEFAULT_LANG
                except Exception:
                    lang = DEFAULT_LANG
                await update.effective_message.reply_text(t(lang, "error"))
        except Exception:
            pass

    application.add_error_handler(error_handler)

    application.post_init = lambda app=application: on_post_init(app, db, sched, DEFAULT_TZ)
    application.post_shutdown = lambda app=application: on_shutdown(app, sched)

    return application


def main() -> None:
    app = build_application()

    loop = asyncio.get_event_loop()

    def _stop(*_: object) -> None:
        if app and app.running:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é...")
            asyncio.ensure_future(app.stop())

    for sig in (signal.SIGINT, signal.SIGTERM):
        try:
            loop.add_signal_handler(sig, _stop)
        except NotImplementedError:
            pass

    logger.info("–ó–∞–ø—É—Å–∫–∞—é polling")
    app.run_polling(close_loop=False, allowed_updates=Update.ALL_TYPES, drop_pending_updates=True)


if __name__ == "__main__":
    main()
